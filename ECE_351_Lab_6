%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                              %
% Jayson Haddon                                                %
% ECE 351 Section 51                                           %
% Lab 6                                                        %
% 03/01/2022    
%Github https://github.com/haddjays?tab=repositories
% Necessary Details:                            %
%                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[11pt,a4]{report}
\usepackage[english]{babel}
%\usepackage{natbib}
\usepackage{url}
\usepackage[utf8x]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\graphicspath{{images/}}
\usepackage{parskip}
\usepackage{fancyhdr}
\usepackage{vmargin}
\usepackage{listings}
\usepackage{hyperref}
\usepackage{xcolor}
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codeblue}{rgb}{0,0,0.95}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{codeblue},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codegreen},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
 
\lstset{style=mystyle}

\setmarginsrb{3 cm}{2.5 cm}{3 cm}{2.5 cm}{1 cm}{1.5 cm}{1 cm}{1.5 cm}

\title{Lab 6}								
% Title
\author{Jayson Haddon}						
% Author
\date{08/27/2020}
% Date

\makeatletter
\let\thetitle\@title
\let\theauthor\@author
\let\thedate\@date
\makeatother

\pagestyle{fancy}
\fancyhf{}
\rhead{\theauthor}
\lhead{\thetitle}
\cfoot{\thepage}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{titlepage}
	\centering
    \vspace*{0.5 cm}
\begin{center}    \textsc{\Large   ECE 351 }\\[2.0 cm]	\end{center}% University Name
	\textsc{\Large Partial Fraction Expansion  }\\[0.5 cm]				% Course Code
	\rule{\linewidth}{0.2 mm} \\[0.4 cm]
	{ \huge \bfseries \thetitle}\\
	\rule{\linewidth}{0.2 mm} \\[1.5 cm]
	
	\begin{minipage}{0.4\textwidth}
		\begin{flushleft} \large
		%	\emph{Submitted To:}\\
		%	Name\\
          % Affiliation\\
           %contact info\\
			\end{flushleft}
			\end{minipage}~
			\begin{minipage}{0.4\textwidth}
            
			\begin{flushright} \large
			\emph{Submitted By :} \\
			Jayson Haddon  
		\end{flushright}
           
	\end{minipage}\\[2 cm]
	
%	\includegraphics[scale = 0.5]{PICMathLogo.png}
    
    
    
    
	
\end{titlepage}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\tableofcontents
\pagebreak

\renewcommand{\thesection}{\arabic{section}}
\section{Introduction}
The purpose of this lab was to use the scipy signal residue to perform partial fraction expansion and to use a user defined function to create the cosine method. 
\section{Equations}
The two differential equations that will be used for this lab are shown in equation 1 and 2 shown below. 
\begin{equation}
    y^{''}(t) + 10y^{'}(t) + 24y(t) = x^{''}(t) + 6x^{'}(t) + 12x(t) 
\end{equation}
\begin{equation}
   y^{5}(t) + 18y^{4}(t) + 218y^{3}(t) + 2036y^{2}(t)+ 9085y^{1}(t)+ 25250y(t) = 25250x(t)
\end{equation}

\section{Methodology}
The first task in part one was to plot the step response y(t) that was done in the pre-lab. To complete this I created a user defined function that was set to the equation 5 shown below in results. With this equations I used the step function that was create in lab 2. After creating the equations I plot it with respect to t. The next part of this task was to use the H(s) function that was found in the prelab and the scipy signal step to plot the step response. To complete this I created two arrays. I named one num and the other den and put the coefficient of each root into the num and den. I then set a variable for time and for y to be equal to sig.step with my num and den being fed into the function. The code and result of this can be seen below in the results. 

The second task in part one was to use the scipy signal residue to print the partial fraction expansion of this expression. To do this I used the same num and den I used to graph the step response but I had to hand an extra power to the den because you were finding the partial fraction of Y(s) = H(s)*X(s) which added an extra power in the denominator. I then set variable R, P, and K equal to the sig.resiude function. The code and output of this function can be seen below in part 1 task 2 in results. 


The first task in part 2 was to use the scipy.signal.residue on the equation two to find the partial fraction expansion of the step response. To complete I took the laplace transform of equation 2. This led to 
\begin{equation}
    \frac{Y(S)}{X(S)} = \frac{25250}{s^5+12s^4+218s^3+2036s^2+9085s+25250}
\end{equation}
I used equation three and populated my num and den arrays with the coefficients from the numerator and denominator. I then imput this into the scipy.signal.residue function to find the partial fraction expansion. The code and results of this can be seen below in the results. 

The second task in part 2 was to use the cosine method to plot the time domain response of the partial fraction expansion of the step response. To do this I created a new user define function. This function took the output from the partial fraction expansion that was just created. It then used a for loop for the len of one of the results for they will be the same size so it doesn't matter which one is used. The next part of the function was to find k and the kangle. To find k I used the np.abs value of the coefficients or the value from R from the partial fraction decomposition.  To find k angle I used the np.angle to find the angle of the complex argument. The next part of the function was to find alpha and omega. To find alpha I took the real part of the coefficients in the power or the values from P of the partial fraction decomposition. To find omega I used the imaginary part of P from the parial fraction decomposition. I then assembled this the from shonwn in equation 4 and returned x. This repeated for each value of i. 
\begin{equation}
    x = k*e^{-alpha*t}*cos(omega*t+kangle). 
\end{equation}
The last part of this task was to combine this all into one equation.  For the two parts that did not have an imaginary value, I did by hand and added them with my results from the cosine methods function. The next part of the task was to use the scipy.signal.step to plot the step response with the step respone from the cosine method function. To do this I once again changed my denominator array for the step response and put my numerator and denominator array into the sig.step function. The code and graph for this can be seen in the results. 



\section{Results}


\subsection{Part 1 Task 1}


\begin{equation}
    z = 0.5*step(t) - 0.5e^{-4t}*step(t)+e^{-6t}*step(t)
\end{equation}

\begin{lstlisting}[language=Python]
#...................Define Hand Calculated y(t)...........#
def y1(t):
    z = 0.5*step(t)-0.5*np.exp(-4*t)*step(t)+np.exp(-6*t)*step(t)
    return z


#....................Defined H(S)...........#
num = [1, 6, 12]
den = [1, 10, 24]

tout, yout = sig.step((num,den),T=t)


#..................Plot y(t) and H(s).............#
y1= y1(t)


plt.figure(figsize = (10, 12))
plt.subplot(3, 1, 1)
plt.plot(t,y1)
plt.grid()
plt.ylabel('Amplitude')
plt.xlabel( 't')
plt.title('Hand Calcuted y(t)')

plt.subplot(3, 1, 2)
plt.plot(tout,yout)
plt.grid()
plt.ylabel('Amplitude ')
plt.xlabel( 't')
plt.title('Scipy signal impulse')
plt.show

\end{lstlisting}

\begin{figure}[h!]
    \begin{center}
  \caption{Hand Calculated step response vs scipty signal step response}
  \includegraphics[scale=1]{Part 1 Task 1.PNG}
\end{center}
\end{figure}
\newpage

\subsection{Part 1 Task 2}

\begin{lstlisting}[language=Python]
#.................Residue.............#

num1 = [0, 1, 6, 12]
den1 = [1 , 10 , 24 , 0]

R, P, K = sig.residue(num1, den1)

print('R =', R)
print('P =', P)
print('K =', K)
\end{lstlisting}
Output
\begin{lstlisting}
R = [ 0.5 -0.5  1. ]
P = [ 0. -4. -6.]
K = []
\end{lstlisting}
\newpage
\subsection{Part 2 Task 1}
\begin{lstlisting}
num2 = [0,0,0,0,0,25250]
den2 = [1, 18, 218, 2036, 9085, 25250,0]

R, P, K = sig.residue(num2, den2)

print('R =', R)
print('P =', P)
print('K =', K)

resulta1 = [-0.48557692+0.72836538j, -0.48557692-0.72836538j, 0.09288674-0.04765193j, 0.09288674+0.04765193j] #From the results of sig.residue taking all the results that have real and imgainary parts
resultb1 = [-3. +4.j, -3. -4.j,-1.+10.j, -1.-10.j] 
\end{lstlisting}

Partial Fraction Expansion Results
\begin{lstlisting}
R = [ 1.        +0.j         -0.48557692+0.72836538j -0.48557692-0.72836538j
 -0.21461963+0.j          0.09288674-0.04765193j  0.09288674+0.04765193j]
P = [  0. +0.j  -3. +4.j  -3. -4.j -10. +0.j  -1.+10.j  -1.-10.j]
K = []
\end{lstlisting}


\subsection{Part 2 Task 2}

\begin{lstlisting}[language=Python]
num2 = [0,0,0,0,0,25250]
den2 = [1, 18, 218, 2036, 9085, 25250,0]

R, P, K = sig.residue(num2, den2)

print('R =', R)
print('P =', P)
print('K =', K)

resulta1 = [-0.48557692+0.72836538j, -0.48557692-0.72836538j, 0.09288674-0.04765193j, 0.09288674+0.04765193j] #From the results of sig.residue taking all the results that have real and imgainary parts
resultb1 = [-3. +4.j, -3. -4.j,-1.+10.j, -1.-10.j] 


def cosmethod(b,a):
    x = 0
    for i in range(len(b)):
        k = np.abs(a[i])
        kang = np.angle(a[i])
        alpha = np.real(b[i])
        omega = np.imag(b[i])
        x += k*np.exp(alpha*t)*np.cos(omega*t + kang)        
        
    return x

t = np.arange(0, 4.5 + steps, steps)

y = step(t)*(cosmethod(resultb1,resulta1)+1 + -0.2146193*np.exp(-10*t))


den3 = [1, 18, 218, 2036, 9085, 25250]

to, yo = sig.step((num2, den3), T=t)

plt.figure(figsize = (10, 12))
plt.subplot(3, 1, 1)
plt.plot(t,y)
plt.grid()
plt.ylabel('Amplitude')
plt.xlabel( 't')
plt.title('Hand Calcuted y(t)')

plt.subplot(3, 1, 2)
plt.plot(to,yo)
plt.grid()
plt.ylabel('Amplitude ')
plt.xlabel( 't')
plt.title('Scipy signal impulse')
plt.show
\end{lstlisting}

\begin{figure}[h!]
    \begin{center}
  \caption{Cosine Method Step Response and signal step Step Response}
  \includegraphics[scale=1]{Part 1 Task 2.PNG}
\end{center}
\end{figure}






\section{Error Analysis}

A big challenge for me for this lab was to create the cosine method function. This took me some time to figure out and after looking at the questions for this lab it looks like I didn't need to do the terms that didn't have an imaginary part by hand. Other then then doing those two inverse Laplace transforms by hand the amount of error for this lab is pretty small since most of it was done by computer functions. 
\section{Questions}
1. For a non-complex pole-residue term, you can still use the cosine method, explain why this
works.

This works because when you go to get your omega, the value of omega is zero since there is no imaginary value. The cosine of 0 is just one and there will still be an alpha value so it all works out because you will be left with the absolute value of k times e to the negative alpha t times cosine of zero which is one. I did not think of this and did not implement it into my lab.

2. Leave any feedback on the clarity of the expectations, instructions, and deliverables.
I have not feedback for this lab. 

\section{Conclusion}
In conclusion, from this lab I was able to graph the step response of a function and then use the scipy.signal.step command to plot the same result of the step response that I hand calculated. I was also able to use the scipy.signal.residue to find the partial fraction decomposition of fractions. With the values from the partial fraction decomposition I was able to create a function to use the cosine method to convert a function from the s domain to the time domain. I was then able to see that I could use the value from the cosine method and plot it and get the same results as using the scipy.signal.step command. 


\section{Github}
https://github.com/haddjays?tab=repositories
\end{document}

\section{Conclusion}

%This template was created by Roza Aceska.
